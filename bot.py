# -*- coding: utf-8 -*-
import asyncio
import logging
import os
import re
from datetime import datetime, timedelta
import gspread
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, BotCommand, MenuButtonCommands
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

print("üì¶ –ò–º–ø–æ—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
print("üîß .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env —Ñ–∞–π–ª–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID")) if os.getenv("ADMIN_ID") else None
GOOGLE_CREDENTIALS_FILE = os.getenv("GOOGLE_CREDENTIALS_FILE")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

print(f"üîë BOT_TOKEN: {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' if BOT_TOKEN else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
print(f"üë®‚Äçüíº ADMIN_ID: {'‚úÖ ' + str(ADMIN_ID) if ADMIN_ID else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
print(f"üìä GOOGLE_CREDENTIALS_FILE: {'‚úÖ ' + str(GOOGLE_CREDENTIALS_FILE) if GOOGLE_CREDENTIALS_FILE else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
print(f"üìã SPREADSHEET_ID: {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' if SPREADSHEET_ID else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if not BOT_TOKEN:
    print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    exit(1)

if not ADMIN_ID:
    print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    exit(1)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_schedule = State()

class PaymentStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_screenshot = State()

class AdminStates(StatesGroup):
    editing_payment_amount = State()
    editing_min_amount = State()
    editing_max_amount = State()
    editing_monthly_price = State()
    editing_sessions_count = State()
    editing_free_days = State()
    editing_sick_days = State()
    editing_schedule_text = State()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Google Sheets
sheets_client = None
drive_service = None
users_sheet = None
payments_sheet = None
attendance_sheet = None
settings_sheet = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SETTINGS = {
    'min_payment': 1000,
    'max_payment': 20000,
    'monthly_price': 8000,
    'sessions_per_month': 10,
    'free_days_limit': 7,
    'sick_days_limit': 3,
    'gym_schedule': '–ü–Ω-–°—Ä-–ü—Ç: 7:00-12:00 (–≥—Ä—É–ø–ø–∞)\n–í—Ç-–ß—Ç-–°–±: –ø–æ –∑–∞–ø–∏—Å–∏'
}

def init_google_services():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Services"""
    global sheets_client, drive_service, users_sheet, payments_sheet, attendance_sheet, settings_sheet
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞–∫ None
    sheets_client = None
    drive_service = None
    users_sheet = None
    payments_sheet = None
    attendance_sheet = None
    settings_sheet = None
    
    try:
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Services...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not GOOGLE_CREDENTIALS_FILE or not os.path.exists(GOOGLE_CREDENTIALS_FILE):
            print(f"‚ùå –§–∞–π–ª {GOOGLE_CREDENTIALS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
            return False
        
        scope = [
            'https://spreadsheets.google.com/feeds',
            'https://www.googleapis.com/auth/drive',
            'https://www.googleapis.com/auth/drive.file'
        ]
        
        print("üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        creds = Credentials.from_service_account_file(GOOGLE_CREDENTIALS_FILE, scopes=scope)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sheets
        print("üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
        sheets_client = gspread.authorize(creds)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Drive
        print("‚òÅÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Drive...")
        drive_service = build('drive', 'v3', credentials=creds)
        
        if not SPREADSHEET_ID:
            print("‚ùå SPREADSHEET_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ!")
            return False
            
        print(f"üìã –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã ID: {SPREADSHEET_ID}")
        spreadsheet = sheets_client.open_by_key(SPREADSHEET_ID)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
        try:
            users_sheet = spreadsheet.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
            print("‚úÖ –õ–∏—Å—Ç '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' –Ω–∞–π–¥–µ–Ω")
        except gspread.WorksheetNotFound:
            users_sheet = spreadsheet.add_worksheet(title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", rows="1000", cols="15")
            users_sheet.append_row([
                "telegram_id", "username", "name", "phone", "schedule", 
                "registration_date", "total_sessions", "current_sessions", 
                "last_payment_date", "last_payment_amount", "next_payment_due", 
                "status", "notes"
            ])
            print("‚úÖ –õ–∏—Å—Ç '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' —Å–æ–∑–¥–∞–Ω")
        
        try:
            payments_sheet = spreadsheet.worksheet("–ò—Å—Ç–æ—Ä–∏—è_–ø–ª–∞—Ç–µ–∂–µ–π")
            print("‚úÖ –õ–∏—Å—Ç '–ò—Å—Ç–æ—Ä–∏—è_–ø–ª–∞—Ç–µ–∂–µ–π' –Ω–∞–π–¥–µ–Ω")
        except gspread.WorksheetNotFound:
            payments_sheet = spreadsheet.add_worksheet(title="–ò—Å—Ç–æ—Ä–∏—è_–ø–ª–∞—Ç–µ–∂–µ–π", rows="1000", cols="12")
            payments_sheet.append_row([
                "timestamp", "name", "telegram_id", "amount", "payment_type", "status", 
                "photo_file_id", "drive_photo_link", "confirmed_by", 
                "confirmation_date", "sessions_period", "notes"
            ])
            print("‚úÖ –õ–∏—Å—Ç '–ò—Å—Ç–æ—Ä–∏—è_–ø–ª–∞—Ç–µ–∂–µ–π' —Å–æ–∑–¥–∞–Ω")
        
        try:
            attendance_sheet = spreadsheet.worksheet("–ü–æ—Å–µ—â–µ–Ω–∏—è")
            print("‚úÖ –õ–∏—Å—Ç '–ü–æ—Å–µ—â–µ–Ω–∏—è' –Ω–∞–π–¥–µ–Ω")
        except gspread.WorksheetNotFound:
            attendance_sheet = spreadsheet.add_worksheet(title="–ü–æ—Å–µ—â–µ–Ω–∏—è", rows="1000", cols="10")
            attendance_sheet.append_row([
                "date", "name", "telegram_id", "status", "reason", 
                "session_number", "payment_period"
            ])
            print("‚úÖ –õ–∏—Å—Ç '–ü–æ—Å–µ—â–µ–Ω–∏—è' —Å–æ–∑–¥–∞–Ω")
        
        try:
            settings_sheet = spreadsheet.worksheet("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("‚úÖ –õ–∏—Å—Ç '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –Ω–∞–π–¥–µ–Ω")
        except gspread.WorksheetNotFound:
            settings_sheet = spreadsheet.add_worksheet(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", rows="20", cols="3")
            settings_sheet.append_row(["parameter", "value", "description"])
            for key, value in DEFAULT_SETTINGS.items():
                settings_sheet.append_row([key, value, ""])
            print("‚úÖ –õ–∏—Å—Ç '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' —Å–æ–∑–¥–∞–Ω —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞...")
        test_users = users_sheet.get_all_values()
        print(f"‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(test_users)}")
        
        print("üéâ Google Services —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Services: {e}")
        print(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        
        if "PERMISSION_DENIED" in str(e):
            print("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("   1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã –≤ .env")
            print("   2. –ß—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—à–∞—Ä–µ–Ω–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
            print("   3. –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω—ã Google Sheets –∏ Drive API")
        
        return False

class SettingsManager:
    @staticmethod
    def get_setting(key, default_value=None):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
        try:
            if settings_sheet is None:
                print(f"‚ùå settings_sheet –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {key}={default_value}")
                return default_value
                
            settings = settings_sheet.get_all_records()
            for setting in settings:
                if setting.get('parameter') == key:
                    value = setting.get('value')
                    if key in ['min_payment', 'max_payment', 'monthly_price', 'sessions_per_month', 'free_days_limit', 'sick_days_limit']:
                        return int(value)
                    return str(value)
            return default_value
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º default: {default_value}")
            return default_value
    
    @staticmethod
    def update_setting(key, value):
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
        try:
            if settings_sheet is None:
                print(f"‚ùå settings_sheet –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
                
            settings = settings_sheet.get_all_values()
            for i, row in enumerate(settings[1:], start=2):
                if len(row) >= 2 and row[0] == key:
                    settings_sheet.update_cell(i, 2, value)
                    print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {value}")
                    return True
            
            settings_sheet.append_row([key, value, ""])
            print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ {key}: {value}")
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
            return False

class UserManager:
    @staticmethod
    def get_user(telegram_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google Sheets"""
        try:
            if users_sheet is None:
                print("‚ùå users_sheet –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                if str(telegram_id) == str(ADMIN_ID):
                    return {
                        'telegram_id': telegram_id,
                        'username': 'admin',
                        'name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                        'phone': '',
                        'schedule': '',
                        'status': 'active'
                    }
                return None
                
            users = users_sheet.get_all_records()
            for user in users:
                if str(user.get('telegram_id')) == str(telegram_id):
                    return user
            return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            if str(telegram_id) == str(ADMIN_ID):
                return {
                    'telegram_id': telegram_id,
                    'username': 'admin',
                    'name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                    'phone': '',
                    'schedule': '',
                    'status': 'active'
                }
            return None

    @staticmethod
    def add_user(telegram_id, username, name, phone, schedule):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets"""
        try:
            if users_sheet is None:
                print("‚ùå users_sheet –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
                
            row = [
                telegram_id, username, name, phone, schedule, 
                datetime.now().strftime("%Y-%m-%d"),
                0, 0, "", "", "", "active", ""
            ]
            users_sheet.append_row(row)
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheets: {name}")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    @staticmethod
    def get_user_sessions_count(telegram_id):
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if attendance_sheet is None:
                return 0
                
            attendance_records = attendance_sheet.get_all_records()
            user = UserManager.get_user(telegram_id)
            
            if not user:
                return 0
                
            last_payment_date = user.get('last_payment_date', '')
            
            if not last_payment_date:
                count = sum(
                    1 for record in attendance_records
                    if str(record.get('telegram_id')) == str(telegram_id) and 
                       record.get('status') == 'attended'
                )
            else:
                count = sum(
                    1 for record in attendance_records
                    if str(record.get('telegram_id')) == str(telegram_id) and 
                       record.get('status') == 'attended' and
                       record.get('date', '') > last_payment_date
                )
            
            return count
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–Ω—è—Ç–∏–π: {e}")
            return 0

# –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂")],
            [KeyboardButton(text="üìã –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="ü§í –û—Ç–º–µ—Ç–∏—Ç—å –±–æ–ª–µ–∑–Ω—å")],
            [KeyboardButton(text="‚ùå –ü–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    return keyboard

# –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
def get_admin_menu():
    """–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üìù –ü—Ä–∞–≤–∏–ª–∞")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    return keyboard

async def save_payment_to_sheets(telegram_id, amount, payment_type="transfer", status="pending", photo_file_id=None):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –≤ Google Sheets"""
    try:
        if users_sheet is None or payments_sheet is None:
            print("‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return False
            
        user = UserManager.get_user(telegram_id)
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        current_sessions = UserManager.get_user_sessions_count(telegram_id)
        
        payment_row = [
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            user['name'],
            telegram_id,
            amount or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            payment_type,
            status,
            photo_file_id or "",
            f"drive_link_{datetime.now().strftime('%Y%m%d_%H%M%S')}" if photo_file_id else "",
            "",
            "",
            current_sessions,
            ""
        ]
        payments_sheet.append_row(payment_row)
        
        print(f"–ü–ª–∞—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Sheets –¥–ª—è {user['name']}")
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return False

async def notify_admin_on_error(error_text: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ"""
    try:
        clean_error = str(error_text).replace('*', '').replace('_', '').replace('`', '')[:1000]
        await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û–®–ò–ë–ö–ê –í –ë–û–¢–ï:\n\n{clean_error}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="menu", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="payment", description="üí≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂"),
        BotCommand(command="profile", description="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="sick", description="ü§í –û—Ç–º–µ—Ç–∏—Ç—å –±–æ–ª–µ–∑–Ω—å"),
        BotCommand(command="quit", description="‚ùå –ü–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"),
        BotCommand(command="rules", description="üìù –ü—Ä–∞–≤–∏–ª–∞ –∑–∞–ª–∞"),
        BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"),
        BotCommand(command="edit_prices", description="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã (–∞–¥–º–∏–Ω)"),
        BotCommand(command="edit_limits", description="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã (–∞–¥–º–∏–Ω)")
    ]
    await bot.set_my_commands(commands)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"
    
    print(f"üîç –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
    
    try:
        if users_sheet is None:
            print(f"‚ö†Ô∏è Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
            
            if user_id == ADMIN_ID:
                await message.answer(
                    f"üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
                    f"‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ–º –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ Google Sheets)\n"
                    f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets\n\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    f"/help - —Å–ø—Ä–∞–≤–∫–∞"
                )
            else:
                await message.answer(
                    f"üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.\n\n"
                    f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            return
            
        user = UserManager.get_user(user_id)
        print(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user is not None}")
        
        if user:
            if user_id == ADMIN_ID:
                print(f"üîç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—Ö–æ–¥–∏—Ç –≤ —Å–∏—Å—Ç–µ–º—É")
                await message.answer(
                    f"üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_admin_menu()
                )
            else:
                print(f"üîç –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}")
                await message.answer(
                    f"–ü—Ä–∏–≤–µ—Ç, {user['name']}! üëã\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
                    reply_markup=get_main_menu()
                )
        else:
            print(f"üîç –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
            await message.answer(
                "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç! üèãÔ∏è‚Äç‚ôÄÔ∏è\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
                "üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–§–ò–û)"
            )
            await state.set_state(RegistrationStates.waiting_for_name)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
        
        if user_id == ADMIN_ID:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {str(e)[:200]}\n\n"
                f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
            )
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@router.message(Command("help"))
async def cmd_help(message: Message):
    print(f"üîç –ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    if message.from_user.id == ADMIN_ID:
        help_text = (
            "üë®‚Äçüíº –ê–î–ú–ò–ù-–°–ü–†–ê–í–ö–ê\n\n"
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:\n"
            "‚öôÔ∏è /edit_prices - –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã\n"
            "‚è∞ /edit_limits - –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö\n"
            "üìù –ü—Ä–∞–≤–∏–ª–∞ - —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–ª–∞\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π:\n"
            "‚Ä¢ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Ç—Ä–µ–±—É—é—Ç –≤–∞—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        )
    else:
        monthly_price = SettingsManager.get_setting('monthly_price', DEFAULT_SETTINGS['monthly_price'])
        sessions_count = SettingsManager.get_setting('sessions_per_month', DEFAULT_SETTINGS['sessions_per_month'])
        min_payment = SettingsManager.get_setting('min_payment', DEFAULT_SETTINGS['min_payment'])
        
        help_text = (
            "ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º\n\n"
            "–£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞\n"
            "‚Ä¢ –ò–ª–∏ –≤–≤–æ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /)\n\n"
            "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üí≥ /payment - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂\n"
            "ü§í /sick - –û—Ç–º–µ—Ç–∏—Ç—å –±–æ–ª–µ–∑–Ω—å\n"
            "‚ùå /quit - –ü–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
            "üìã /profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
            "‚ÑπÔ∏è /help - –ü–æ–º–æ—â—å\n\n"
            f"–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            f"‚Ä¢ –ú–µ—Å—è—á–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç: {monthly_price} —Å–æ–º –∑–∞ {sessions_count} –∑–∞–Ω—è—Ç–∏–π\n"
            f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: {min_payment} —Å–æ–º\n"
            "‚Ä¢ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"
        )
    
    await message.answer(help_text)

@router.message(Command("payment"))
async def cmd_payment(message: Message, state: FSMContext):
    print(f"üîç –ö–æ–º–∞–Ω–¥–∞ /payment –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    user_id = message.from_user.id
    user = UserManager.get_user(user_id)
    
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    monthly_price = SettingsManager.get_setting('monthly_price', DEFAULT_SETTINGS['monthly_price'])
    sessions_count = SettingsManager.get_setting('sessions_per_month', DEFAULT_SETTINGS['sessions_per_month'])
    
    message_text = f"üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π\n\n"
    message_text += f"üí° –ú–µ—Å—è—á–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç: {monthly_price} —Å–æ–º –∑–∞ {sessions_count} –∑–∞–Ω—è—Ç–∏–π\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–∞—Ä—Ç–µ", callback_data="payment_transfer")],
        [InlineKeyboardButton(text="üíµ –û–ø–ª–∞—Ç–∏–ª –Ω–∞–ª–∏—á–Ω—ã–º–∏", callback_data="payment_cash")]
    ])
    
    await message.answer(message_text, reply_markup=keyboard)

@router.message(Command("profile"))
async def cmd_profile(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /profile - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üîç –ö–æ–º–∞–Ω–¥–∞ /profile –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    user_id = message.from_user.id
    user = UserManager.get_user(user_id)
    
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    sessions_count = UserManager.get_user_sessions_count(user_id)
    sessions_per_month = SettingsManager.get_setting('sessions_per_month', DEFAULT_SETTINGS['sessions_per_month'])
    sessions_left = max(0, sessions_per_month - sessions_count)
    monthly_price = SettingsManager.get_setting('monthly_price', DEFAULT_SETTINGS['monthly_price'])
    
    profile_text = (
        f"üìã –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üë§ –ò–º—è: {user.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìÖ –ì—Ä–∞—Ñ–∏–∫: {user.get('schedule', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"üèãÔ∏è –ü–æ—Å–µ—â–µ–Ω–∏—è:\n"
        f"‚Ä¢ –ü–æ—Å–µ—â–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π: {sessions_count}\n"
        f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π: {sessions_left}\n\n"
        f"üí≥ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–ª–∞—Ç–∞:\n"
        f"‚Ä¢ –°—É–º–º–∞: {user.get('last_payment_amount', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} —Å–æ–º\n"
        f"‚Ä¢ –î–∞—Ç–∞: {user.get('last_payment_date', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {user.get('status', 'active')}\n"
        f"\nüí° –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {monthly_price} —Å–æ–º –∑–∞ {sessions_per_month} –∑–∞–Ω—è—Ç–∏–π"
    )
    
    await message.answer(profile_text)

@router.message(Command("sick"))
async def cmd_sick(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /sick - –æ—Ç–º–µ—Ç–∏—Ç—å –±–æ–ª–µ–∑–Ω—å"""
    print(f"üîç –ö–æ–º–∞–Ω–¥–∞ /sick –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    user_id = message.from_user.id
    user = UserManager.get_user(user_id)
    
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    if attendance_sheet is None:
        await message.answer("‚ùå –§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets)")
        return
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–∏—Å—Ç –ø–æ—Å–µ—â–µ–Ω–∏–π
    today = datetime.now().strftime("%Y-%m-%d")
    attendance_row = [
        today,
        user['name'],
        user_id,
        'sick',
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—Ç–∏–ª –±–æ–ª–µ–∑–Ω—å',
        '',
        ''
    ]
    
    try:
        attendance_sheet.append_row(attendance_row)
        
        await message.answer(
            f"ü§í –ë–æ–ª–µ–∑–Ω—å –æ—Ç–º–µ—á–µ–Ω–∞ –Ω–∞ {today}.\n"
            f"–í—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π—Ç–µ! üíä\n\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω."
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(
            ADMIN_ID,
            f"ü§í {user['name']} –æ—Ç–º–µ—Ç–∏–ª –±–æ–ª–µ–∑–Ω—å\n"
            f"üìÖ –î–∞—Ç–∞: {today}\n"
            f"üë§ ID: {user_id}"
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –±–æ–ª–µ–∑–Ω–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.message(Command("quit"))
async def cmd_quit(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /quit - –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    print(f"üîç –ö–æ–º–∞–Ω–¥–∞ /quit –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    user_id = message.from_user.id
    user = UserManager.get_user(user_id)
    
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É —Ö–æ–¥–∏—Ç—å", callback_data="confirm_quit")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞—é—Å—å", callback_data="cancel_quit")]
    ])
    
    await message.answer(
        f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ —Ö–æ–¥–∏—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?\n\n"
        f"–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ '–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π'.",
        reply_markup=keyboard
    )

@router.message(Command("rules"))
async def cmd_rules(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /rules - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞"""
    print(f"üîç –ö–æ–º–∞–Ω–¥–∞ /rules –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    min_payment = SettingsManager.get_setting('min_payment', DEFAULT_SETTINGS['min_payment'])
    max_payment = SettingsManager.get_setting('max_payment', DEFAULT_SETTINGS['max_payment'])
    monthly_price = SettingsManager.get_setting('monthly_price', DEFAULT_SETTINGS['monthly_price'])
    sessions_count = SettingsManager.get_setting('sessions_per_month', DEFAULT_SETTINGS['sessions_per_month'])
    free_days = SettingsManager.get_setting('free_days_limit', DEFAULT_SETTINGS['free_days_limit'])
    sick_days = SettingsManager.get_setting('sick_days_limit', DEFAULT_SETTINGS['sick_days_limit'])
    gym_schedule = SettingsManager.get_setting('gym_schedule', DEFAULT_SETTINGS['gym_schedule'])
    
    rules_text = f"""üìã –ü–†–ê–í–ò–õ–ê –§–ò–¢–ù–ï–°-–ó–ê–õ–ê

üí∞ –û–ü–õ–ê–¢–ê:
‚Ä¢ –ú–µ—Å—è—á–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç: {monthly_price} —Å–æ–º –∑–∞ {sessions_count} –∑–∞–Ω—è—Ç–∏–π
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {min_payment} —Å–æ–º
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {max_payment} —Å–æ–º
‚Ä¢ –û–ø–ª–∞—Ç–∞: –ø–µ—Ä–µ–≤–æ–¥–æ–º (—Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º) –∏–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏

‚è∞ –ì–†–ê–§–ò–ö –†–ê–ë–û–¢–´:
{gym_schedule}

‚ùÑÔ∏è –ó–ê–ú–û–†–û–ó–ö–ê –ê–ë–û–ù–ï–ú–ï–ù–¢–ê:
‚Ä¢ –ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã: –¥–æ {free_days} –∑–∞–Ω—è—Ç–∏–π –ø–æ–¥—Ä—è–¥
‚Ä¢ –ü–æ –±–æ–ª–µ–∑–Ω–∏: –¥–æ {sick_days} –∑–∞–Ω—è—Ç–∏–π –ø–æ–¥—Ä—è–¥ (—Å –æ—Ç–º–µ—Ç–∫–æ–π –≤ –±–æ—Ç–µ)
‚Ä¢ –ó–∞–º–æ—Ä–æ–∑–∫–∞ –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –±–æ–ª–µ–∑–Ω–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞

‚úÖ –ü–û–°–ï–©–ï–ù–ò–ï:
‚Ä¢ –ü—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—Ç—Ä–æ–≥–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ –ø–æ –∑–∞–ø–∏—Å–∏
‚Ä¢ –û—Ç–º–µ—á–∞—Ç—å –±–æ–ª–µ–∑–Ω—å –≤ –±–æ—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
‚Ä¢ –ó–∞ {sessions_count} –∑–∞–Ω—è—Ç–∏–π –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ

‚ùå –û–¢–ú–ï–ù–ê –ó–ê–ù–Ø–¢–ò–ô:
‚Ä¢ –û—Ç–º–µ–Ω–∞ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 —á–∞—Å–∞ = –∑–∞–Ω—è—Ç–∏–µ —Å–≥–æ—Ä–∞–µ—Ç
‚Ä¢ –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è = –∑–∞–Ω—è—Ç–∏–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è

üì± –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ë–û–¢–ê:
‚Ä¢ /payment - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É
‚Ä¢ /sick - –æ—Ç–º–µ—Ç–∏—Ç—å –±–æ–ª–µ–∑–Ω—å  
‚Ä¢ /profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å
‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    await message.answer(rules_text)

@router.message(Command("edit_prices"))
async def cmd_edit_prices(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /edit_prices - –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    print(f"üîç –ö–æ–º–∞–Ω–¥–∞ /edit_prices –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    min_payment = SettingsManager.get_setting('min_payment', DEFAULT_SETTINGS['min_payment'])
    max_payment = SettingsManager.get_setting('max_payment', DEFAULT_SETTINGS['max_payment'])
    monthly_price = SettingsManager.get_setting('monthly_price', DEFAULT_SETTINGS['monthly_price'])
    sessions_count = SettingsManager.get_setting('sessions_per_month', DEFAULT_SETTINGS['sessions_per_month'])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üí∞ –¶–µ–Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {monthly_price} —Å–æ–º", callback_data="edit_monthly_price")],
        [InlineKeyboardButton(text=f"üìâ –ú–∏–Ω–∏–º—É–º: {min_payment} —Å–æ–º", callback_data="edit_min_payment")],
        [InlineKeyboardButton(text=f"üìà –ú–∞–∫—Å–∏–º—É–º: {max_payment} —Å–æ–º", callback_data="edit_max_payment")],
        [InlineKeyboardButton(text=f"üèãÔ∏è –ó–∞–Ω—è—Ç–∏–π –≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ: {sessions_count}", callback_data="edit_sessions_count")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_settings")]
    ])
    
    await message.answer(
        "üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω –∏ –ø–ª–∞—Ç–µ–∂–µ–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

@router.message(Command("edit_limits"))
async def cmd_edit_limits(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /edit_limits - –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    print(f"üîç –ö–æ–º–∞–Ω–¥–∞ /edit_limits –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    free_days = SettingsManager.get_setting('free_days_limit', DEFAULT_SETTINGS['free_days_limit'])
    sick_days = SettingsManager.get_setting('sick_days_limit', DEFAULT_SETTINGS['sick_days_limit'])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚ùÑÔ∏è –î–Ω–µ–π –∑–∞–º–æ—Ä–æ–∑–∫–∏: {free_days}", callback_data="edit_free_days")],
        [InlineKeyboardButton(text=f"ü§í –î–Ω–µ–π –ø–æ –±–æ–ª–µ–∑–Ω–∏: {sick_days}", callback_data="edit_sick_days")],
        [InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_schedule")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_settings")]
    ])
    
    await message.answer(
        "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(F.data.startswith("edit_"))
async def handle_edit_settings(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    setting_type = callback.data.replace("edit_", "")
    
    settings_map = {
        "monthly_price": ("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ (—Å–æ–º):", AdminStates.editing_monthly_price),
        "min_payment": ("üìâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É (—Å–æ–º):", AdminStates.editing_min_amount),
        "max_payment": ("üìà –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É (—Å–æ–º):", AdminStates.editing_max_amount),
        "sessions_count": ("üèãÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ:", AdminStates.editing_sessions_count),
        "free_days": ("‚ùÑÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∑–∞–º–æ—Ä–æ–∑–∫–∏:", AdminStates.editing_free_days),
        "sick_days": ("ü§í –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ –±–æ–ª–µ–∑–Ω–∏:", AdminStates.editing_sick_days),
        "schedule": ("üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ª–∞:", AdminStates.editing_schedule_text)
    }
    
    if setting_type in settings_map:
        message_text, state_to_set = settings_map[setting_type]
        await callback.message.answer(message_text)
        await state.update_data(editing_setting=setting_type)
        await state.set_state(state_to_set)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.message(AdminStates.editing_monthly_price)
async def process_monthly_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞"""
    try:
        new_price = int(message.text.strip())
        if new_price <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        if SettingsManager.update_setting('monthly_price', new_price):
            await message.answer(f"‚úÖ –¶–µ–Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_price} —Å–æ–º")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@router.message(AdminStates.editing_min_amount)
async def process_min_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã"""
    try:
        new_amount = int(message.text.strip())
        if new_amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        if SettingsManager.update_setting('min_payment', new_amount):
            await message.answer(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_amount} —Å–æ–º")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@router.message(AdminStates.editing_max_amount)
async def process_max_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã"""
    try:
        new_amount = int(message.text.strip())
        if new_amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        if SettingsManager.update_setting('max_payment', new_amount):
            await message.answer(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_amount} —Å–æ–º")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@router.message(AdminStates.editing_sessions_count)
async def process_sessions_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç–∏–π"""
    try:
        new_count = int(message.text.strip())
        if new_count <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        if SettingsManager.update_setting('sessions_per_month', new_count):
            await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_count}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@router.message(AdminStates.editing_free_days)
async def process_free_days(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–Ω–µ–π –∑–∞–º–æ—Ä–æ–∑–∫–∏"""
    try:
        new_days = int(message.text.strip())
        if new_days < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            return
        
        if SettingsManager.update_setting('free_days_limit', new_days):
            await message.answer(f"‚úÖ –î–Ω–µ–π –∑–∞–º–æ—Ä–æ–∑–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_days}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@router.message(AdminStates.editing_sick_days)
async def process_sick_days(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–Ω–µ–π –ø–æ –±–æ–ª–µ–∑–Ω–∏"""
    try:
        new_days = int(message.text.strip())
        if new_days < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            return
        
        if SettingsManager.update_setting('sick_days_limit', new_days):
            await message.answer(f"‚úÖ –î–Ω–µ–π –ø–æ –±–æ–ª–µ–∑–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_days}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@router.message(AdminStates.editing_schedule_text)
async def process_schedule_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    new_schedule = message.text.strip()
    if not new_schedule:
        await message.answer("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    if SettingsManager.update_setting('gym_schedule', new_schedule):
        await message.answer(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ:\n\n{new_schedule}")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@router.message(F.text == "üí≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂")
async def menu_payment(message: Message, state: FSMContext):
    await cmd_payment(message, state)

@router.message(F.text == "üìã –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def menu_profile(message: Message):
    await cmd_profile(message)

@router.message(F.text == "ü§í –û—Ç–º–µ—Ç–∏—Ç—å –±–æ–ª–µ–∑–Ω—å")
async def menu_sick(message: Message):
    await cmd_sick(message)

@router.message(F.text == "‚ùå –ü–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
async def menu_quit(message: Message):
    await cmd_quit(message)

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def menu_help(message: Message):
    await cmd_help(message)

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
async def admin_settings(message: Message):
    """–ê–¥–º–∏–Ω—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    if message.from_user.id != ADMIN_ID:
        return
    
    min_payment = SettingsManager.get_setting('min_payment', DEFAULT_SETTINGS['min_payment'])
    max_payment = SettingsManager.get_setting('max_payment', DEFAULT_SETTINGS['max_payment'])
    monthly_price = SettingsManager.get_setting('monthly_price', DEFAULT_SETTINGS['monthly_price'])
    sessions_count = SettingsManager.get_setting('sessions_per_month', DEFAULT_SETTINGS['sessions_per_month'])
    free_days = SettingsManager.get_setting('free_days_limit', DEFAULT_SETTINGS['free_days_limit'])
    sick_days = SettingsManager.get_setting('sick_days_limit', DEFAULT_SETTINGS['sick_days_limit'])
    
    settings_text = f"""‚öôÔ∏è –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò

üí∞ –û–ø–ª–∞—Ç–∞:
‚Ä¢ –ú–∏–Ω–∏–º—É–º: {min_payment} —Å–æ–º
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {max_payment} —Å–æ–º
‚Ä¢ –¶–µ–Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {monthly_price} —Å–æ–º
‚Ä¢ –ó–∞–Ω—è—Ç–∏–π –≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ: {sessions_count}

‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∫–∞:
‚Ä¢ –î–Ω–µ–π –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã: {free_days}
‚Ä¢ –î–Ω–µ–π –ø–æ –±–æ–ª–µ–∑–Ω–∏: {sick_days}

üîß –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/edit_prices - –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã
/edit_limits - –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã"""
    
    await message.answer(settings_text)

@router.message(F.text == "üìù –ü—Ä–∞–≤–∏–ª–∞")
async def admin_rules(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞"""
    await cmd_rules(message)

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        if users_sheet is None or payments_sheet is None:
            await message.answer("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets)")
            return
            
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        users = users_sheet.get_all_records()
        payments = payments_sheet.get_all_records()
        
        total_users = len(users)
        active_users = len([u for u in users if u.get('status') == 'active'])
        
        # –ü–ª–∞—Ç–µ–∂–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        current_month = datetime.now().strftime("%Y-%m")
        monthly_payments = [p for p in payments if p.get('timestamp', '').startswith(current_month) and p.get('status') == 'confirmed']
        monthly_income = sum(float(p.get('amount', 0)) for p in monthly_payments if str(p.get('amount', '')).replace('.', '').isdigit())
        
        stats_text = f"""üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}
‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_users - active_users}

üí∞ –î–æ—Ö–æ–¥—ã –∑–∞ {current_month}:
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {len(monthly_payments)}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {monthly_income:.0f} —Å–æ–º

üìã –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:
‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {len([p for p in payments if p.get('status') == 'pending'])}

üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""
        
        await message.answer(stats_text)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def menu_main(message: Message):
    user = UserManager.get_user(message.from_user.id)
    if user:
        if message.from_user.id == ADMIN_ID:
            await message.answer(
                f"üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                reply_markup=get_admin_menu()
            )
        else:
            await message.answer(
                f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu()
            )
    else:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–æ–≤
@router.callback_query(F.data == "payment_transfer")
async def payment_transfer_selected(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8000):")
    await state.update_data(payment_type="transfer")
    await state.set_state(PaymentStates.waiting_for_amount)
    await callback.answer()

@router.callback_query(F.data == "payment_cash")
async def payment_cash_selected(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8000):")
    await state.update_data(payment_type="cash")
    await state.set_state(PaymentStates.waiting_for_amount)
    await callback.answer()

@router.callback_query(F.data == "confirm_quit")
async def confirm_quit_callback(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    try:
        user_id = callback.from_user.id
        user = UserManager.get_user(user_id)
        
        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.message.answer(
            f"‚úÖ –í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π'.\n\n"
            f"–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ /start\n"
            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏! üëã"
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(
            ADMIN_ID,
            f"‚ùå {user['name']} –ø–æ–∫–∏–Ω—É–ª –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
            f"üë§ ID: {user_id}\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    await callback.answer()

@router.callback_query(F.data == "cancel_quit")
async def cancel_quit_callback(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    await callback.message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–µ–º—Å—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ! üí™\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "close_settings")
async def close_settings_callback(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await callback.message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(RegistrationStates.waiting_for_name)
async def process_registration_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    name = message.text.strip()
    if not name or len(name) < 2:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)")
        return
    
    await state.update_data(name=name)
    await message.answer(f"üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(RegistrationStates.waiting_for_phone)

@router.message(RegistrationStates.waiting_for_phone)
async def process_registration_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    phone = message.text.strip()
    if not phone or len(phone) < 10:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return
    
    await state.update_data(phone=phone)
    await message.answer(f"üìÖ –ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ –∑–∞–Ω—è—Ç–∏–π –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: '—É—Ç—Ä–æ–º', '–≤–µ—á–µ—Ä–æ–º', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-—Å—Ä–µ–¥–∞-–ø—è—Ç–Ω–∏—Ü–∞')")
    await state.set_state(RegistrationStates.waiting_for_schedule)

@router.message(RegistrationStates.waiting_for_schedule)
async def process_registration_schedule(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    schedule = message.text.strip()
    if not schedule:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫")
        return
    
    data = await state.get_data()
    user_id = message.from_user.id
    username = message.from_user.username or ""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = UserManager.add_user(
        telegram_id=user_id,
        username=username,
        name=data['name'],
        phone=data['phone'],
        schedule=schedule
    )
    
    if success:
        await message.answer(
            f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üë§ –ò–º—è: {data['name']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"üìÖ –ì—Ä–∞—Ñ–∏–∫: {schedule}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:",
            reply_markup=get_main_menu()
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(
            ADMIN_ID,
            f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"–ò–º—è: {data['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"–ì—Ä–∞—Ñ–∏–∫: {schedule}\n"
            f"ID: {user_id}\n"
            f"Username: @{username}"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–ª–∞—Ç–µ–∂–∞
@router.message(PaymentStates.waiting_for_amount)
async def process_payment_amount(message: Message, state: FSMContext):
    try:
        amount_text = message.text.replace(',', '.').replace(' ', '')
        amount = float(amount_text)
        
        min_payment = SettingsManager.get_setting('min_payment', DEFAULT_SETTINGS['min_payment'])
        max_payment = SettingsManager.get_setting('max_payment', DEFAULT_SETTINGS['max_payment'])
        
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        if amount < min_payment:
            await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {min_payment} —Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        if amount > max_payment:
            await message.answer(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {max_payment} —Å–æ–º. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return
        
        data = await state.get_data()
        payment_type = data.get('payment_type', 'transfer')
        
        success = await save_payment_to_sheets(
            telegram_id=message.from_user.id,
            amount=amount,
            payment_type=payment_type,
            status="pending"
        )
        
        if success:
            await message.answer(
                f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç!\n"
                f"üí∞ –°—É–º–º–∞: {amount} —Å–æ–º\n"
                f"üí≥ –¢–∏–ø: {'–ü–µ—Ä–µ–≤–æ–¥' if payment_type == 'transfer' else '–ù–∞–ª–∏—á–Ω—ã–µ'}\n"
                f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            user = UserManager.get_user(message.from_user.id)
            if user:
                await bot.send_message(
                    ADMIN_ID,
                    f"üí≥ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!\n\n"
                    f"üë§ {user['name']}\n"
                    f"üí∞ –°—É–º–º–∞: {amount} —Å–æ–º\n"
                    f"üí≥ –¢–∏–ø: {'–ü–µ—Ä–µ–≤–æ–¥' if payment_type == 'transfer' else '–ù–∞–ª–∏—á–Ω—ã–µ'}\n"
                    f"üë§ ID: {message.from_user.id}"
                )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã). –ù–∞–ø—Ä–∏–º–µ—Ä: 8000")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –í–ê–ñ–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï–î–ù–ò–ú!
@router.message(F.text)
async def handle_unknown_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ü–û–°–õ–ï–î–ù–ò–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫!"""
    current_state = await state.get_state()
    if current_state is not None:
        return
    
    if message.text and message.text.startswith('/'):
        return
    
    if message.from_user.id == ADMIN_ID:
        await message.answer(
            "ü§ñ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞",
            reply_markup=get_admin_menu()
        )
    else:
        user = UserManager.get_user(message.from_user.id)
        if user:
            await message.answer(
                "ü§ñ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞:",
                reply_markup=get_main_menu()
            )
        else:
            await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç–∞...")
        print(f"üîë –¢–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...")
        print(f"üë®‚Äçüíº –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Services (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã)
        if not init_google_services():
            print("‚ö†Ô∏è Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
            await notify_admin_on_error("Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            print("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...")
        await set_bot_commands()
        print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        print(f"üîç –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤: {len(dp.sub_routers)}")
        print(f"üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ —Ä–æ—É—Ç–µ—Ä–µ: {len(router.message.handlers)}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –∑–∞–ø—É—Å–∫–µ
        try:
            await bot.send_message(
                ADMIN_ID,
                f"üöÄ –ë–û–¢ –ó–ê–ü–£–©–ï–ù!\n\n"
                f"üì± –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç\n"
                f"‚öôÔ∏è Google Sheets: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω—ã' if users_sheet else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}\n"
                f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ –∑–∞–ø—É—Å–∫–µ: {e}")
        
        print("\nüéâ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("üì± –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        print(f"üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ ID: {ADMIN_ID}")
        
        await dp.start_polling(bot)
        
    except Exception as e:
        error_msg = f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}"
        print(error_msg)
        
        try:
            await notify_admin_on_error(error_msg)
        except:
            pass
            
        import traceback
        traceback.print_exc()
    finally:
        try:
            await bot.session.close()
        except:
            pass

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()